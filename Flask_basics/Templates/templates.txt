_________
Templates
_________

_Flask will automatically look for HTML Templates in the "templates" directory.
(Flags will automatically look for HTML templates in the "templates" directory,
which means you need to make sure all your HTML files is called "templates")

_Later on we will discuss how to separate larger applications to have multiple
template directories.

________________________
Example 1 and onwards...
________________________

_Using the "render_template" function we can directly render an HTML file with
our Flask web app.

_But we haven't leveraged the power of python at all yet!

_We want a way to be able to use Python code in our app, changing and updating
variables and logic, and then send that information to the template.

_We can use the Jinja template engine to do this.

_____
Jinja
_____

_Jinja templating will let us directly insert variables from our Python code to
the HTML file.

_The syntax for inserting a variable is {{some_variable}}

_We can also have access to control flow syntax in our templates such as "for
loops" and "if" statements.


For example:

In the body section:

<body>
  {%if "Rufus" in puppies%}
    <p> Found you Rufus </p>
  {% else %}
    <p> Hmm.. Rufus is not in the list!</p>
  {% endif %}
</body>
